#version 330 core
in vec2 TexCoord;
layout (location = 0) out vec4 FragColor;
uniform sampler2D RenderMap;
uniform sampler2D AlbedoMap;
uniform sampler2D PositionMap;
uniform sampler2D NormalMap;
uniform vec2 resolution;
uniform int ssaoarea;
uniform float ssaostrength;
uniform vec4 color;
uniform mat4 VPmat;

#define SAMPLES 2.0f

float shadowCalc(vec3 position)
{
	float shadow = 1.0f;
	vec3 normal = texture(NormalMap, TexCoord).xyz;
	vec3 ni = normalize(cross(vec3(12.88f, 17.3f, -2.12f), normal));
	vec3 nj = normalize(cross(ni, normal));
	
	
	
	for(float i = -SAMPLES; i <= SAMPLES; i++)
	{
		for(float j = -SAMPLES; j <= SAMPLES; j++)
		{
			vec4 p = VPmat * vec4(position + (normal + (ni * i/SAMPLES  + nj * j/SAMPLES) * ssaoarea) * 0.05f, 1.0f);
			p /= p.w;
			vec4 np = VPmat * texture(PositionMap, p.xy*0.5f + 0.5f);
			np /= np.w;
			shadow += p.z < np.z || p.x < -1.0f || p.y < -1.0f || p.x > 1.0f || p.y > 1.0f ? 0.0f : ssaostrength / SAMPLES/SAMPLES;
		}
	}
	return shadow;
}

void main()
{
	FragColor = texture(RenderMap, TexCoord) + vec4(texture(AlbedoMap, TexCoord).xyz * color.xyz * color.w / shadowCalc(texture(PositionMap, TexCoord).xyz), 1.0f);
}